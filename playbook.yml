- name: Generar reporte de inventario con todos los hosts
  hosts: all
  gather_facts: no

  tasks:

    - name: Realizar ping condicional
      ansible.builtin.ping:
      ignore_unreachable: yes
      ignore_errors: yes
      register: ping_result

    - name: Intentar ping y recolección de facts para Windows
      ansible.windows.win_ping:
      ignore_unreachable: yes
      ignore_errors: yes
      register: win_ping_result

    - name: Recolección de facts
      ansible.builtin.setup:
      ignore_unreachable: yes
      ignore_errors: yes
      register: host_facts
      when: (ping_result is defined and not ping_result.failed) or (win_ping_result is defined and not win_ping_result.failed)

    - name: Establecer facts predeterminados para hosts que no se conectan
      ansible.builtin.set_fact:
        host_status:
          conectado: "No"
          ansible_facts_data: {}
      when: (ping_result.failed is not defined or not ping_result.failed) and (win_ping_result.failed is not defined or not win_ping_result.failed)

    - name: Establecer facts del host si la conexión fue exitosa
      ansible.builtin.set_fact:
        host_status:
          conectado: "Sí"
          ansible_facts_data: "{{ host_facts.ansible_facts | default({}) }}"
      when: ping_result.failed or win_ping_result.failed

    - name: Construir datos del host para el reporte
      ansible.builtin.set_fact:
        host_info:
          hostname: "{{ inventory_hostname }}"
          conectado: "{{ host_status.conectado }}"
          os_family: "{{ host_status.ansible_facts_data['os_family'] | default('Desconocido') }}"
          ansible_distribution: "{{ host_status.ansible_facts_data['distribution'] | default('N/A') }}"
          ansible_distribution_version: "{{ host_status.ansible_facts_data['distribution_version'] | default('N/A') }}"
          ansible_machine_arch: "{{ host_status.ansible_facts_data['architecture'] | default('N/A') }}"
          ansible_processor_vcpus: "{{ host_status.ansible_facts_data['processor_vcpus'] | default('N/A') }}"
          ansible_memtotal_mb: "{{ host_status.ansible_facts_data['memtotal_mb'] | default('N/A') }}"

    - debug:
        msg: "{{item}}"
      loop: "{{hostvars.keys()}}"
      run_once: true
      delegate_to: localhost


    - debug:
        msg: "{{hostvars[item].host_info}}"
      loop: "{{hostvars.keys()}}"
      run_once: true
      delegate_to: localhost

    - name: Generar reporte CSV a partir de la plantilla
      ansible.builtin.template:
        src: reporte_hosts.j2
        dest: "./reporte_inventario_{{ ansible_date_time.iso8601 }}.csv"
      register: template
      run_once: true
      delegate_to: localhost

    - debug:
        msg: "{{template}}"
      delegate_to: localhost

    - name: Run a command using a templated variable (always use quote filter to avoid injection)
      ansible.builtin.shell: "cat ./reporte_inventario_{{ ansible_date_time.iso8601 }}.csv"
      register: cat_register
      delegate_to: localhost

    - debug:
        msg: "{{cat_register}}"
      delegate_to: localhost

    - name: Send the notification email
      community.general.mail:
        host: "{{ mail_host }}"        # Injected from the custom credential
        port: "{{ mail_port }}"        # Injected from the custom credential
        username: "{{ mail_username }}"  # Injected from the custom credential
        password: "{{ mail_password }}"  # Injected from the custom credential
        to: "{{ mail_to }}"
        subject: "Reporte execution"
        body: "The reporte automation job has successfully finished."
        secure: starttls
        attach:
          - "./reporte_inventario_{{ ansible_date_time.iso8601 }}.csv"
        secure: starttls
      delegate_to: localhost
      run_once: true